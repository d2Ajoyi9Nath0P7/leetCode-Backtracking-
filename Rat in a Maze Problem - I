problem link : https://www.geeksforgeeks.org/problems/rat-in-a-maze-problem/1?page=1&category=Backtracking&sortBy=submissions
From         : GFG


int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};

char dir[4] = {'U', 'R', 'D', 'L'};

bool isValid(int i,int j,vector<vector<int>>&vis,vector<vector<int>>&maze,int n)
{
    if(i >=0 && i < n && j >= 0 && j < n && vis[i][j] == 0 && maze[i][j] == 1)
    {
        return true;
    }
    return false;
}


void dfs(int row, int col, vector<vector<int>>& maze, int n, string& path, vector<string>&ans,vector<vector<int>>& vis)
{
    if(row == n - 1 && col == n - 1)
    {
        ans.push_back(path);
        return;
    }

    for (int i = 0; i < 4; i++)
    {
        int nrow = row + dx[i];//
        int ncol = col + dy[i];//

        if (isValid(nrow,ncol,vis,maze,n))
        {
            vis[nrow][ncol] = 1;
            path.push_back(dir[i]);//R

            dfs(nrow, ncol, maze, n, path, ans, vis);

            path.pop_back();
            vis[nrow][ncol] = 0;
        }
    }
}

vector<string> ratInMaze(vector<vector<int>>& maze)
{
    int n = maze.size();
    vector<vector<int>> vis(n, vector<int>(n, 0));
    string path = "";
    vector<string>ans;

    vis[0][0] = 1;
    dfs(0, 0, maze, n, path,ans, vis);
    sort(ans.begin(),ans.end());
    return ans;
}
